import os
import logging
import pandas as pd
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from dotenv import load_dotenv
from groq_client import get_segment_by_behavior
from insight_chart import plot_behavior

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
DATA_PATH = os.getenv("DATA_PATH", "clients.parquet")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
df_clients = pd.read_parquet(DATA_PATH)

SEGMENT_MAP = {
    0: ("–ì–æ—Ä–æ–¥—Å–∫–æ–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å", "–ê–∫—Ç–∏–≤–Ω–æ –∏–∑—É—á–∞–µ—Ç –≥–æ—Ä–æ–¥—Å–∫—É—é —Å—Ä–µ–¥—É, —Ç—Ä–∞—Ç–∏—Ç –Ω–∞ –µ–¥—É –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è."),
    1: ("–ò–Ω–≤–µ—Å—Ç–∏—Ä—É—é—â–∏–π —Å–µ–º—å—è–Ω–∏–Ω", "–°—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥, —Å–µ–º—å—è, –º–µ–Ω—å—à–µ —Ç—Ä–∞—Ç –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è."),
    2: ("–¶–∏—Ñ—Ä–æ–≤–æ–π –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫", "–ê–∫—Ç–∏–≤–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è, –ø–ª–∞—Ç–∏—Ç —Ü–∏—Ñ—Ä–æ–≤—ã–º–∏ –∫–æ—à–µ–ª—å–∫–∞–º–∏.")
}

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏.\n\n"
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/segment <card_id> ‚Äî –ø–æ–∫–∞–∂—É —Å–µ–≥–º–µ–Ω—Ç –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞\n"
        "/insight <card_id> ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∏–Ω—Å–∞–π—Ç —á–µ—Ä–µ–∑ AI –∏ –≥—Ä–∞—Ñ–∏–∫\n"
        "/clients ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ (–≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞)\n"
        "/random ‚Äî –ø–æ–∫–∞–∂—É —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞\n"
        "/segments ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º"
    )

# /segment
async def segment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /segment <card_id>")
        return
    try:
        card_id = int(context.args[0])
        row = df_clients[df_clients["card_id"] == card_id]
        if row.empty:
            await update.message.reply_text("‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        feats = row.iloc[0].to_dict()
        seg_id = feats["segment_id"]
        seg_name, seg_desc = SEGMENT_MAP.get(seg_id, ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."))

        msg = f"üìá –ö–ª–∏–µ–Ω—Ç: {card_id}\n\n"
        msg += f"üìä –ü–æ–≤–µ–¥–µ–Ω–∏–µ:\n"
        msg += f"- –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {feats['total_txns']}\n"
        msg += f"- –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {feats['avg_txn_amt']:.0f}‚Ç∏\n"
        msg += f"- –ï–¥–∞: {feats['pct_food']*100:.1f}%\n"
        msg += f"- Travel: {feats['pct_travel']*100:.1f}%\n"
        msg += f"- –ö–æ—à–µ–ª—ë–∫: {'–î–∞' if feats['pct_wallet_use'] > 0.5 else '–ù–µ—Ç'}\n"
        msg += f"- –ó–∞—Ä–ø–ª–∞—Ç–∞: {'–î–∞' if feats['salary_flag'] else '–ù–µ—Ç'}\n"
        msg += f"- –£–Ω–∏–∫. –≥–æ—Ä–æ–¥–∞: {feats['unique_cities']}\n\n"
        msg += f"üß© –°–µ–≥–º–µ–Ω—Ç: {seg_name}\nüìå {seg_desc}"

        await update.message.reply_text(msg)
    except Exception as e:
        logger.error(e)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ.")

# /insight
async def insight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /insight <card_id>")
        return
    try:
        card_id = int(context.args[0])
        row = df_clients[df_clients["card_id"] == card_id]
        if row.empty:
            await update.message.reply_text("‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        feats = row.iloc[0].drop("card_id").to_dict()
        await update.message.reply_text("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ LLaMA3...")
        result = get_segment_by_behavior(feats)

        msg = f"üìå –°–µ–≥–º–µ–Ω—Ç: {result['segment_name']}\n"
        msg += f"üß† –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {result['explanation']}\n"

        if result['metrics_markdown']:
            msg += f"\nüìä –ú–µ—Ç—Ä–∏–∫–∏:\n"
            msg += f"```\n{result['metrics_markdown']}\n```"

        if result['recommendation']:
            msg += f"\n‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            for r in result['recommendation']:
                msg += f"‚Ä¢ {r}\n"

        await update.message.reply_text(msg, parse_mode="Markdown")

        chart_path = plot_behavior(card_id, feats)
        await update.message.reply_photo(photo=open(chart_path, "rb"))
    except Exception as e:
        logger.error(e)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–∞.")

# /clients
async def clients(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        path = "clients_list.txt"
        df_clients["card_id"].to_csv(path, index=False, header=False)
        await update.message.reply_document(document=open(path, "rb"))
    except Exception as e:
        logger.error(e)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤.")

# /random
async def random_client(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        row = df_clients.sample(1).iloc[0]
        seg_name, _ = SEGMENT_MAP.get(row["segment_id"], ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", ""))
        await update.message.reply_text(f"üé≤ –°–ª—É—á–∞–π–Ω—ã–π –∫–ª–∏–µ–Ω—Ç: {row['card_id']}\n–°–µ–≥–º–µ–Ω—Ç: {seg_name}")
    except Exception as e:
        logger.error(e)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.")

# /segments
async def segments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        counts = df_clients["segment_id"].value_counts().sort_index()
        msg = "üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º:\n"
        for seg_id, count in counts.items():
            name, _ = SEGMENT_MAP.get(seg_id, ("?", ""))
            msg += f"{name} (ID {seg_id}): {count} –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
        await update.message.reply_text(msg)
    except Exception as e:
        logger.error(e)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    if not BOT_TOKEN:
        raise ValueError("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("segment", segment))
    app.add_handler(CommandHandler("insight", insight))
    app.add_handler(CommandHandler("clients", clients))
    app.add_handler(CommandHandler("random", random_client))
    app.add_handler(CommandHandler("segments", segments))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()
