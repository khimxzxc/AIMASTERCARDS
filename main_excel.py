
import pandas as pd
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.utils import executor
from dotenv import load_dotenv
import os

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
EXCEL_PATH = "client_features.xlsx"

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(bot)

# –ó–∞–≥—Ä—É–∂–∞–µ–º Excel —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –∏ —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏
df_clients = pd.read_excel(EXCEL_PATH)

@dp.message_handler(commands=["start"])
async def start_handler(message: Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /segment <card_id> —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç –∫–ª–∏–µ–Ω—Ç–∞.")

@dp.message_handler(commands=["segment"])
async def segment_handler(message: Message):
    try:
        _, cid = message.text.strip().split()
        cid = int(cid)
        row = df_clients[df_clients["card_id"] == cid]
        if row.empty:
            await message.reply("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        r = row.iloc[0]
        await message.reply(
            f"üìá –ö–ª–∏–µ–Ω—Ç: {cid}\n"
            f"- –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {r['total_txns']}\n"
            f"- –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {int(r['avg_txn_amt'])}‚Ç∏\n"
            f"- –ï–¥–∞: {r['pct_food']*100:.1f}%\n"
            f"- Travel: {r['pct_travel']*100:.1f}%\n"
            f"- –ì–æ—Ä–æ–¥–æ–≤: {int(r['unique_cities'])}\n"
            f"üß© –°–µ–≥–º–µ–Ω—Ç: {r['segment_id']}"
        )
    except Exception as e:
        await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π /segment <card_id>")

if __name__ == "__main__":
    from aiogram import executor
    from aiogram.contrib.middlewares.logging import LoggingMiddleware
    dp.middleware.setup(LoggingMiddleware())
    executor.start_polling(dp)
